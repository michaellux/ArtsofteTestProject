// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ArtsofteTestProject.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ArtsofteTestProject.Models
{
    public partial class ArtsofteTestProjectContext
    {
        private IArtsofteTestProjectContextProcedures _procedures;

        public virtual IArtsofteTestProjectContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ArtsofteTestProjectContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IArtsofteTestProjectContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetAllDepartmentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllEmployeeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllProgrammingLanguagesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeePlaceResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ArtsofteTestProjectContextProcedures : IArtsofteTestProjectContextProcedures
    {
        private readonly ArtsofteTestProjectContext _context;

        public ArtsofteTestProjectContextProcedures(ArtsofteTestProjectContext context)
        {
            _context = context;
        }

        public virtual async Task<int> DeleteEmployeePlaceAsync(Guid? pId, OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_Id",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeePlace] @p_Id, @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllDepartmentsResult>> GetAllDepartmentsAsync(OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllDepartmentsResult>("EXEC @returnValue = [dbo].[GetAllDepartments] @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllEmployeeResult>> GetAllEmployeeAsync(OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllEmployeeResult>("EXEC @returnValue = [dbo].[GetAllEmployee] @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllProgrammingLanguagesResult>> GetAllProgrammingLanguagesAsync(OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllProgrammingLanguagesResult>("EXEC @returnValue = [dbo].[GetAllProgrammingLanguages] @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeResult>> GetEmployeeAsync(Guid? pId, OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_Id",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeResult>("EXEC @returnValue = [dbo].[GetEmployee] @p_Id, @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeePlaceResult>> GetEmployeePlaceAsync(Guid? pId, OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_Id",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeePlaceResult>("EXEC @returnValue = [dbo].[GetEmployeePlace] @p_Id, @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeeAsync(Guid? pId, string pName, string pSurname, int? pAge, string pGender, OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_Id",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_Name",
                    Size = 100,
                    Value = pName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_Surname",
                    Size = 100,
                    Value = pSurname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_Age",
                    Value = pAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "p_Gender",
                    Size = 100,
                    Value = pGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployee] @p_Id, @p_Name, @p_Surname, @p_Age, @p_Gender, @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeePlaceAsync(Guid? pId, Guid? pEmployeeId, Guid? pDepartmentId, Guid? pProgrammingLanguageId, OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_Id",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_EmployeeId",
                    Value = pEmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_DepartmentId",
                    Value = pDepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_ProgrammingLanguageId",
                    Value = pProgrammingLanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployeePlace] @p_Id, @p_EmployeeId, @p_DepartmentId, @p_ProgrammingLanguageId, @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateEmployeeAsync(Guid? pId, string pName, string pSurname, int? pAge, string pGender, OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_Id",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_Name",
                    Size = 100,
                    Value = pName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_Surname",
                    Size = 100,
                    Value = pSurname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_Age",
                    Value = pAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "p_Gender",
                    Size = 100,
                    Value = pGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateEmployee] @p_Id, @p_Name, @p_Surname, @p_Age, @p_Gender, @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateEmployeePlaceAsync(Guid? pId, Guid? pEmployeeId, Guid? pDepartmentId, Guid? pProgrammingLanguageId, OutputParameter<int?> outerrornumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterout_error_number = new SqlParameter
            {
                ParameterName = "out_error_number",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outerrornumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_Id",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_EmployeeId",
                    Value = pEmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_DepartmentId",
                    Value = pDepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "p_ProgrammingLanguageId",
                    Value = pProgrammingLanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterout_error_number,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateEmployeePlace] @p_Id, @p_EmployeeId, @p_DepartmentId, @p_ProgrammingLanguageId, @out_error_number OUTPUT", sqlParameters, cancellationToken);

            outerrornumber.SetValue(parameterout_error_number.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
